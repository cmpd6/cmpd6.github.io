---
title: "CMPD6 abstracts"
format:
  pdf:
    toc: true
    number-sections: false
    colorlinks: true
    geometry:
      - top=15mm
      - bottom=20mm
      - left=15mm
      - right=15mm
execute:
  echo: false
---


```{r}
#| echo: false
#| message: false
#| results: 'hide'
# Process list of abstracts
library(yaml)
library(dplyr)
library(stringr)
library(countrycode)

# Process yaml header
# The markdown files used have just a yaml header; the markdown part
# often causes read_yml to crash. So we process only the header
process_yml_header = function(fqfn) {
  yaml_part = NULL
  con = file(fqfn, "r")
  line = readLines(con, n = 1)
  if (line == "---") {
    in_yaml = TRUE
    while ( in_yaml ) {
      line = readLines(con, n = 1)
      if ( length(line) == 0 ) {
        break
      } else if (line == "---") {
        in_yaml = FALSE
      } else {
        yaml_part = paste0(yaml_part, line, "\n")
      }
    }
  }
  close(con)
  yaml_fields = read_yaml(text = yaml_part)
  return(yaml_fields)
}
# Make stuff LaTeX compatible (e.g., & to \&)
make_LaTeX_friendly = function(ch) {
  ch = gsub("&", "\\&", ch)
  ch = gsub("/assets/images/", "../assets/images/", ch)
  return(ch)
}
# Are we testing (i.e., exporting to the working directory) or in production?
TESTING = TRUE
## MINISYMPOSIA
minisymposia = data.frame(file_name = list.files(path = "../_minisymposia",
                                                 pattern = glob2rx("*.md")))
short_name = c()
long_name = c()
for (i in 1:dim(minisymposia)[1]) {
  ms_dir = gsub("_tools","_minisymposia", getwd())
  tmp = process_yml_header(sprintf("%s/%s",
                                   ms_dir,
                                   minisymposia$file_name[i]))
  short_name = c(short_name, gsub(".md", "", minisymposia$file_name[i]))
  long_name = c(long_name, tmp$name)
}
minisymposia$short_name = short_name
minisymposia$long_name = long_name
## PARTICIPANTS
# Get list of participants from csv file
participants_csv = read.csv("CMPD6-all-participants.csv")
participants_csv$email = tolower(participants_csv$email)
## ABSTRACTS
# Get list of abstracts from csv file
abstracts_csv = read.csv("CMPD6-abstracts.csv")
abstracts_csv$email = tolower(abstracts_csv$email)
# A bit of cleaning of the file
abstracts_csv$first_name = str_trim(str_to_title(abstracts_csv$first_name))
abstracts_csv$last_name = str_trim(abstracts_csv$last_name)
abstracts_csv$email = str_trim(tolower(abstracts_csv$email))
abstracts_csv$full_name = sprintf("%s %s", 
                                 abstracts_csv$first_name,
                                 abstracts_csv$last_name)
## Merge tables
all_info = merge(x = participants_csv, y = abstracts_csv,
                 by.x = "email", by.y = "email", 
                 all.y = TRUE)
colnames(all_info)[whicslslslh(colnames(all_info) == "first_name.y")] =
  "first_name"
colnames(all_info)[which(colnames(all_info) == "last_name.y")] = 
  "last_name"
# Rewrite abstracts table
abstracts = all_info %>%
  arrange(gsub(" ", "", all_info$last_name, fixed = TRUE), 
          first_name)
# Keep only talks
idx_talks = which(abstracts$plenary.x == TRUE)
idx_talks = union(idx_talks, which(abstracts$plenary.y == TRUE))
idx_talks = 
  union(idx_talks, which(nchar(abstracts$minisymposium) > 0))
idx_talks = 
  union(idx_talks, which(nchar(abstracts$contributed) > 0))
idx_talks = sort(idx_talks)
abstracts = abstracts[idx_talks,]
```


\vskip\medskipamount
\leaders\vrule width \textwidth\vskip0.4pt
\vskip\medskipamount
\nointerlineskip
\newpage


```{r}
#| echo: false
#| message: false
#| results: 'asis'
###
### GENERATE ABSTRACT LIST
###
for (i in 1:dim(abstracts)[1]) {
  cat("\n## ", abstracts$full_name[i])
  if (abstracts$plenary.y[i] == "P") {
    cat(" (P talk) - ")
  } else if (nchar(abstracts$minisymposium[i])>0) {
    cat(" (MS talk) - ")
  } else if (nchar(abstracts$contributed[i])>0) {
    cat(" (C talk) - ")
  }
  cat(str_trim(abstracts$talk_title[i]), "\n")
  # Prepare information about speakers
  table_info_speaker = c(abstracts$full_name[i])
  if (!is.na(abstracts$department[i])) {
    if (nchar(abstracts$department[i])>0) {
      table_info_speaker = c(table_info_speaker, abstracts$department[i])
    }
  }
  table_info_speaker = c(table_info_speaker, abstracts$institution.y[i])
  table_info_speaker = c(table_info_speaker, abstracts$institution_country[i])
  print(knitr::kable(table_info_speaker, format = "latex", 
                     col.names = NULL, label = NA,
                     booktabs = TRUE))
  # Now gather info for the talk table
  table_info_talk = c()
  if (abstracts$plenary.y[i] == "P") {
    table_info_talk = c(table_info_talk, "Plenary presentation")
  } else if (nchar(abstracts$minisymposium[i])>0) {
    table_info_talk = c(table_info_talk, "Minisymposium presentation")
    tmp = str_trim(gsub("- ", "", abstracts$name_ms[i]))
    table_info_talk = c(table_info_talk, paste0("(", tmp, ")"))
  } else if (nchar(abstracts$contributed[i])>0) {
    table_info_talk = c(table_info_talk, "Contributed presentation")
  }
  # Print talk info
  print(knitr::kable(table_info_talk, format = "latex", 
                     col.names = NULL, label = NA,
                     booktabs = TRUE))
  # Throw in just a bit of space
  cat("\\vskip0.5cm")
  # Print abstract
  if (nchar(abstracts$talk_abstract[i])>0) {
    cat("\n\n", make_LaTeX_friendly(abstracts$talk_abstract[i]))
  }
  cat("\n")
  cat("\\vskip\\medskipamount\n
  \\leaders\\vrule width \\textwidth\\vskip0.4pt\n
  \\vskip\\medskipamount\n
  \\nointerlineskip\n
  \\pagebreak[2]\n\n")
}
```
